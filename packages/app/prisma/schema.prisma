// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models for authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model for authentication and profile
model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  image         String?
  password      String?    // for email/password authentication
  emailVerified DateTime?
  provider      String?    // google, github
  providerId    String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // Application relations
  skills        Skill[]
  assessments   Assessment[]
  skillHistory  SkillHistory[]
  
  @@unique([provider, providerId])
  @@index([email])
}

// Skill categories for grouping skills
model SkillCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?  // icon name or emoji
  color       String?  // hex color for UI
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  skills      Skill[]
  
  @@index([slug])
}

// Individual skills that users can have
model Skill {
  id            String   @id @default(cuid())
  userId        String
  categoryId    String
  name          String
  proficiency   Int      @default(0) // 0-10 scale
  description   String?
  tags          String   @default("") // JSON string array for MySQL compatibility
  source        SkillSource @default(MANUAL) // how skill was added
  verified      Boolean  @default(false) // verified by assessment or external source
  lastAssessed  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      SkillCategory @relation(fields: [categoryId], references: [id])
  assessments   Assessment[]
  history       SkillHistory[]
  
  @@unique([userId, name])
  @@index([userId, categoryId])
  @@index([proficiency])
}

// Track skill proficiency changes over time
model SkillHistory {
  id            String   @id @default(cuid())
  skillId       String
  userId        String
  proficiency   Int      // proficiency at this point in time
  reason        String?  // reason for change
  source        SkillSource
  createdAt     DateTime @default(now())
  
  // Relations
  skill         Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([skillId, createdAt])
  @@index([userId, createdAt])
}

// Assessments taken by users
model Assessment {
  id            String   @id @default(cuid())
  userId        String
  skillId       String?  // null if general assessment
  type          AssessmentType
  score         Int?     // assessment score if applicable
  proficiency   Int?     // resulting proficiency level
  feedback      String?  // AI-generated or manual feedback
  metadata      Json?    // additional assessment data
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill         Skill?   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  questions     AssessmentQuestion[]
  
  @@index([userId, createdAt])
  @@index([skillId])
}

// Questions and answers for assessments
model AssessmentQuestion {
  id            String   @id @default(cuid())
  assessmentId  String
  question      String
  answer        String?
  isCorrect     Boolean?
  metadata      Json?    // additional question data
  createdAt     DateTime @default(now())
  
  // Relations
  assessment    Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@index([assessmentId])
}

// Enums for consistent data types
enum SkillSource {
  MANUAL        // User manually added
  ASSESSMENT    // Added via assessment
  GITHUB        // Imported from GitHub analysis
  AI_SUGGESTED  // AI recommendation
  IMPORTED      // Imported from resume/file
}

enum AssessmentType {
  SELF_ASSESSMENT   // User rates themselves
  QUIZ             // Knowledge quiz
  PROJECT_REVIEW   // Review of GitHub projects
  PEER_REVIEW      // Peer validation
  AI_EVALUATION    // AI-based evaluation
}
